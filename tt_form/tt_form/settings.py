"""
Django settings for tt_form project.

Generated by 'django-admin startproject' using Django 1.10.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# 这里用到了python中一个神奇的变量 __file__ 
# 这个变量可以获取到当前文件（包含这个代码的文件）的路径。
# os.path.dirname(__file__) 得到文件所在目录，
# 再来一个os.path.dirname()就是目录的上一级，
# BASE_DIR 即为 项目 所在目录。
# 我们在后面的与目录有关的变量都用它，这样使得移植性更强。



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '@a3y^upsa7%79474613q0c!l*dv#n=+lr6=@87gpt0_=55z8kb'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG＝True 时，如果出现 bug 便于我们看见问题所在，
# 但是部署时最好不要让用户看见bug的详情，
# 可能一些不怀好心的人攻击网站，造成不必要的麻烦。


ALLOWED_HOSTS = []
# ALLOWED_HOSTS 允许你设置哪些域名可以访问，
# 即使在 Apache 或 Nginx 等中绑定了，这里不允许的话，也是不能访问的。
# 当 DEBUG=False 时，这个为必填项，如果不想输入，可以用 ALLOW_HOSTS = ['*'] 来允许所有的。

# ****************************************************************************************

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'form1',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'tt_form.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
# 有时候有一些模板不是属于app的，比如 baidutongji.html, share.html等，
# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': [
#             os.path.join(BASE_DIR,'templates').replace('\\', '/'),
#             os.path.join(BASE_DIR,'templates2').replace('\\', '/'),
#         ],
#         'APP_DIRS': True,
#       	..................后面的不写了，反正在上面那个DIRS里面加入路径就行
# ]
# 这样 就可以把模板文件放在 templates 和 templates2 文件夹中了。





WSGI_APPLICATION = 'tt_form.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
# static 是静态文件所有目录，比如 jquery.js, bootstrap.min.css 等文件。
# 一般来说我们只要把静态文件放在 APP 中的 static 目录下
# 部署时用 python manage.py collectstatic 就可以把静态文件收集到（复制到） STATIC_ROOT 目录
# STATIC_ROOT = os.path.join(BASE_DIR, 'collected_static')
# 但是有时我们有一些共用的静态文件，这时候可以设置 STATICFILES_DIRS 另外弄一个文件夹，如下：
# STATICFILES_DIRS = (
#     os.path.join(BASE_DIR, "common_static"),    #BASE_DIR是项目的绝对路径，join()把路径拼起来
#     '/var/www/static/',    #var是项目名，www是app名，static是个文件夹，它放在app路径下面
# )
# 这样我们就可以把静态文件放在 common_static 和 /var/www/static/中了，Django也能找到它们。
# 当运行 python manage.py collectstatic 的时候
# STATIC_ROOT 文件夹 是用来将所有STATICFILES_DIRS中所有文件夹中的文件，以及各app中static中的文件都复制过来
# 把这些文件放到一起是为了用apache等部署的时候更方便
#
# 这个是默认设置，Django 默认会在 STATICFILES_DIRS中的文件夹 和 各app下的static文件夹中找文件
# 注意有先后顺序，Django 通过 STATICFILES_FINDERS 中的“查找器”，找到符合的就停下来，
# 找到了就不再继续找了
# STATICFILES_FINDERS = (
#     "django.contrib.staticfiles.finders.FileSystemFinder",
#     "django.contrib.staticfiles.finders.AppDirectoriesFinder"
# )



# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR,'media')
# media文件夹用来存放用户上传的文件，与权限有关
# 详情见django静态文件：http://www.ziqiangxuetang.com/django/django-static-files.html
# 和django部署：http://www.ziqiangxuetang.com/django/django-deploy.html